
TWI-slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a13  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e5  00000000  00000000  00000cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a1c  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000124  00000000  00000000  00001ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007528  00000000  00000000  00001ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f2  00000000  00000000  00009520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00009712  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002b5d  00000000  00000000  00009792  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	57 d0       	rcall	.+174    	; 0x13a <main>
  8c:	64 c0       	rjmp	.+200    	; 0x156 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
  90:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  94:	88 e4       	ldi	r24, 0x48	; 72
  96:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  9a:	08 95       	ret

0000009c <i2c_set_address>:
  9c:	87 e2       	ldi	r24, 0x27	; 39
  9e:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
  a2:	08 95       	ret

000000a4 <i2c_start>:
  a4:	94 ea       	ldi	r25, 0xA4	; 164
  a6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  aa:	ec eb       	ldi	r30, 0xBC	; 188
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	99 23       	and	r25, r25
  b2:	ec f7       	brge	.-6      	; 0xae <i2c_start+0xa>
  b4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  b8:	98 7f       	andi	r25, 0xF8	; 248
  ba:	98 30       	cpi	r25, 0x08	; 8
  bc:	11 f0       	breq	.+4      	; 0xc2 <i2c_start+0x1e>
  be:	90 31       	cpi	r25, 0x10	; 16
  c0:	a1 f4       	brne	.+40     	; 0xea <i2c_start+0x46>
  c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  cc:	ec eb       	ldi	r30, 0xBC	; 188
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <i2c_start+0x2c>
  d6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  da:	98 7f       	andi	r25, 0xF8	; 248
  dc:	98 31       	cpi	r25, 0x18	; 24
  de:	39 f0       	breq	.+14     	; 0xee <i2c_start+0x4a>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 34       	cpi	r25, 0x40	; 64
  e4:	29 f4       	brne	.+10     	; 0xf0 <i2c_start+0x4c>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	08 95       	ret
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	08 95       	ret

000000f2 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  f2:	84 e9       	ldi	r24, 0x94	; 148
  f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
  f8:	ec eb       	ldi	r30, 0xBC	; 188
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	84 fd       	sbrc	r24, 4
 100:	fd cf       	rjmp	.-6      	; 0xfc <i2c_stop+0xa>

}/* i2c_stop */
 102:	08 95       	ret

00000104 <i2c_write>:
    uint8_t   twst;
#if LCD_AVAIL
	displayLCD_main(1, "TWCR_ST 1: ", TWCR, "NONE");
#endif    
	// send data to the previously addressed device
	TWDR = data;
 104:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 108:	84 e8       	ldi	r24, 0x84	; 132
 10a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 10e:	ec eb       	ldi	r30, 0xBC	; 188
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	ec f7       	brge	.-6      	; 0x112 <i2c_write+0xe>
	displayLCD_main(2, "TWSR_ST 1: ", TWSR, "NONE");
	displayLCD_main(3, "TWDR to write: ", TWDR, "NONE");
#endif

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 118:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 11c:	98 7f       	andi	r25, 0xF8	; 248
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	98 32       	cpi	r25, 0x28	; 40
 122:	09 f4       	brne	.+2      	; 0x126 <i2c_write+0x22>
 124:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 126:	08 95       	ret

00000128 <write_i2c>:
#include "I2C.h"
#include "LCD.h"


void write_i2c(unsigned char value)
{
 128:	cf 93       	push	r28
 12a:	c8 2f       	mov	r28, r24
	unsigned char ret_wr = 0;
	i2c_start((I2C_DEVICE<<1)+I2C_WRITE); 	
 12c:	8e e4       	ldi	r24, 0x4E	; 78
 12e:	ba df       	rcall	.-140    	; 0xa4 <i2c_start>
#if LCD_AVAIL
	displayLCD_main(4, "Start successful", NONE, "NONE");
#endif
//_delay_ms(5000);
	ret_wr = i2c_write(value);
 130:	8c 2f       	mov	r24, r28
#if LCD_AVAIL			
	displayLCD_main(4, "Write status: ", ret_wr, "NONE");
#endif					
//_delay_ms(5000);
	i2c_stop();
 132:	e8 df       	rcall	.-48     	; 0x104 <i2c_write>
 134:	de df       	rcall	.-68     	; 0xf2 <i2c_stop>
#if LCD_AVAIL						
	displayLCD_main(4, "stop successful", NONE, "NONE");
#endif
}
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <main>:
#if LCD_AVAIL
	initLCD();		// LED initialization
#endif
	unsigned char i2c_res = 99;
	
	i2c_init();		// i2c initialization
 13a:	aa df       	rcall	.-172    	; 0x90 <i2c_init>
	i2c_set_address();
 13c:	af df       	rcall	.-162    	; 0x9c <i2c_set_address>
	//displayLCD_main(1, "Init complete", NONE, "NONE");

	/* MT */
	while (1)
	{
		write_i2c(i2c_res);
 13e:	83 e6       	ldi	r24, 0x63	; 99
 140:	f3 df       	rcall	.-26     	; 0x128 <write_i2c>
 142:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	87 ea       	ldi	r24, 0xA7	; 167
 146:	91 e6       	ldi	r25, 0x61	; 97
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <main+0xe>
 150:	00 c0       	rjmp	.+0      	; 0x152 <main+0x18>
 152:	00 00       	nop
 154:	f4 cf       	rjmp	.-24     	; 0x13e <main+0x4>

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
