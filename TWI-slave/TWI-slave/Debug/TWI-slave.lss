
TWI-slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000b98  00000c0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b98  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000c66  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cc4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000015cc  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a6e  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000109e  00000000  00000000  00002e3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  00003edc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00008005  00000000  00000000  0000410c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aca  00000000  00000000  0000c111  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0000cbdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000030ee  00000000  00000000  0000ccab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 35       	cpi	r26, 0x5A	; 90
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	20 d2       	rcall	.+1088   	; 0x4cc <main>
  8c:	83 c5       	rjmp	.+2822   	; 0xb94 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <i2c_init>:
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
  90:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  94:	88 e4       	ldi	r24, 0x48	; 72
  96:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  9a:	08 95       	ret

0000009c <i2c_set_address>:
  9c:	8e e4       	ldi	r24, 0x4E	; 78
  9e:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
  a2:	08 95       	ret

000000a4 <i2c_start_SR>:

void i2c_start_SR(void)
{
	// send START condition
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
  a4:	84 ec       	ldi	r24, 0xC4	; 196
  a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
  aa:	ec eb       	ldi	r30, 0xBC	; 188
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	88 23       	and	r24, r24
  b2:	ec f7       	brge	.-6      	; 0xae <i2c_start_SR+0xa>

}/* i2c_start_SR */
  b4:	08 95       	ret

000000b6 <configLCDPorts>:
Description:maps the data and control pins to the uC i/o ports
******************************************************************** */
void configLCDPorts(void)
{
	/* configure the microprocessor pins for the data lines */
	lcd_Data_DDR |= (1<<lcd_D7_bit) | (1<<lcd_D6_bit) | (1<<lcd_D5_bit) | (1<<lcd_D4_bit);
  b6:	8a b1       	in	r24, 0x0a	; 10
  b8:	80 6f       	ori	r24, 0xF0	; 240
  ba:	8a b9       	out	0x0a, r24	; 10
	
	/* configure the microprocessor pins for the control lines */
	lcd_Ctlr_DDR |= (1<<lcd_RW_bit) | (1<<lcd_RS_bit) | (1<<lcd_E_bit);
  bc:	8a b1       	in	r24, 0x0a	; 10
  be:	8b 60       	ori	r24, 0x0B	; 11
  c0:	8a b9       	out	0x0a, r24	; 10
	
	/* Turn on LCD */
	DDRB |= (1<<lcd_ONOFF_bit);
  c2:	20 9a       	sbi	0x04, 0	; 4
  c4:	08 95       	ret

000000c6 <lcd_write_4>:
			RS is configured for the expected register
			E is low, RW is low
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	00 d0       	rcall	.+0      	; 0xcc <lcd_write_4+0x6>
  cc:	00 d0       	rcall	.+0      	; 0xce <lcd_write_4+0x8>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	uint8_t mask[4] = {0};
  d2:	19 82       	std	Y+1, r1	; 0x01
  d4:	1a 82       	std	Y+2, r1	; 0x02
  d6:	1b 82       	std	Y+3, r1	; 0x03
  d8:	1c 82       	std	Y+4, r1	; 0x04
  da:	fe 01       	movw	r30, r28
  dc:	31 96       	adiw	r30, 0x01	; 1
  de:	27 e0       	ldi	r18, 0x07	; 7
  e0:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
  e2:	90 e0       	ldi	r25, 0x00	; 0
		{
			mask[i] = 1;
  e4:	61 e0       	ldi	r22, 0x01	; 1
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
  e6:	ac 01       	movw	r20, r24
  e8:	02 2e       	mov	r0, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <lcd_write_4+0x2a>
  ec:	55 95       	asr	r21
  ee:	47 95       	ror	r20
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <lcd_write_4+0x26>
  f4:	40 fd       	sbrc	r20, 0
		{
			mask[i] = 1;
  f6:	60 83       	st	Z, r22
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	31 09       	sbc	r19, r1
  fc:	31 96       	adiw	r30, 0x01	; 1
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
  fe:	23 30       	cpi	r18, 0x03	; 3
 100:	31 05       	cpc	r19, r1
 102:	89 f7       	brne	.-30     	; 0xe6 <lcd_write_4+0x20>
			mask[i] = 1;
		}
	}
	
	/* Clear bits in first step */
	lcd_Data_Port &= ~((1 << lcd_D7_bit) | (1 << lcd_D6_bit) | (1 << lcd_D5_bit) | (1 << lcd_D4_bit));
 104:	8b b1       	in	r24, 0x0b	; 11
 106:	8f 70       	andi	r24, 0x0F	; 15
 108:	8b b9       	out	0x0b, r24	; 11

	/* Set bits where necessary */
	lcd_Data_Port |= ((mask[0]) << lcd_D7_bit | (mask[1]) << lcd_D6_bit | (mask[2]) << lcd_D5_bit | (mask[3]) << lcd_D4_bit);
 10a:	2b b1       	in	r18, 0x0b	; 11
 10c:	49 81       	ldd	r20, Y+1	; 0x01
 10e:	30 e8       	ldi	r19, 0x80	; 128
 110:	43 9f       	mul	r20, r19
 112:	c0 01       	movw	r24, r0
 114:	11 24       	eor	r1, r1
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	30 e4       	ldi	r19, 0x40	; 64
 11a:	93 9f       	mul	r25, r19
 11c:	a0 01       	movw	r20, r0
 11e:	11 24       	eor	r1, r1
 120:	48 2b       	or	r20, r24
 122:	42 2b       	or	r20, r18
 124:	9b 81       	ldd	r25, Y+3	; 0x03
 126:	80 e2       	ldi	r24, 0x20	; 32
 128:	98 9f       	mul	r25, r24
 12a:	90 01       	movw	r18, r0
 12c:	11 24       	eor	r1, r1
 12e:	24 2b       	or	r18, r20
 130:	9c 81       	ldd	r25, Y+4	; 0x04
 132:	30 e1       	ldi	r19, 0x10	; 16
 134:	93 9f       	mul	r25, r19
 136:	c0 01       	movw	r24, r0
 138:	11 24       	eor	r1, r1
 13a:	82 2b       	or	r24, r18
 13c:	8b b9       	out	0x0b, r24	; 11

    /* Write the data */
    enable_E_Pin;                   // Enable pin high
 13e:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_write_4+0x7c>
 146:	00 00       	nop
    _delay_us(1);                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    disable_E_Pin;                  // Enable pin low
 148:	5b 98       	cbi	0x0b, 3	; 11
 14a:	35 e0       	ldi	r19, 0x05	; 5
 14c:	3a 95       	dec	r19
 14e:	f1 f7       	brne	.-4      	; 0x14c <lcd_write_4+0x86>
 150:	00 00       	nop
    _delay_us(1);                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	0f 90       	pop	r0
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <lcd_write_character_4f>:
Outputs:	none
Description:sends a byte to the LCD data register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_character_4f(uint8_t theChar)
{
 160:	cf 93       	push	r28
 162:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 164:	58 98       	cbi	0x0b, 0	; 11
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
 166:	59 9a       	sbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 168:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
 16a:	ad df       	rcall	.-166    	; 0xc6 <lcd_write_4>
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
 16c:	8c 2f       	mov	r24, r28
 16e:	82 95       	swap	r24
 170:	80 7f       	andi	r24, 0xF0	; 240
 172:	a9 df       	rcall	.-174    	; 0xc6 <lcd_write_4>
}
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <lcd_write_instruction_4f>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
 178:	cf 93       	push	r28
 17a:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 17c:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
 17e:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 180:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
 182:	a1 df       	rcall	.-190    	; 0xc6 <lcd_write_4>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
 184:	8c 2f       	mov	r24, r28
 186:	82 95       	swap	r24
 188:	80 7f       	andi	r24, 0xF0	; 240
 18a:	9d df       	rcall	.-198    	; 0xc6 <lcd_write_4>
}
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <lcd_check_BF_4>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
 190:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
 192:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
 194:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 196:	5b 9a       	sbi	0x0b, 3	; 11
 198:	85 e0       	ldi	r24, 0x05	; 5
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_check_BF_4+0xa>
 19e:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
 1a0:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 1a2:	5b 98       	cbi	0x0b, 3	; 11
 1a4:	95 e0       	ldi	r25, 0x05	; 5
 1a6:	9a 95       	dec	r25
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_check_BF_4+0x16>
 1aa:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 1ac:	5b 9a       	sbi	0x0b, 3	; 11
 1ae:	95 e0       	ldi	r25, 0x05	; 5
 1b0:	9a 95       	dec	r25
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_check_BF_4+0x20>
 1b4:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 1b6:	5b 98       	cbi	0x0b, 3	; 11
 1b8:	95 e0       	ldi	r25, 0x05	; 5
 1ba:	9a 95       	dec	r25
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_check_BF_4+0x2a>
 1be:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high
 1c0:	88 23       	and	r24, r24
 1c2:	4c f3       	brlt	.-46     	; 0x196 <lcd_check_BF_4+0x6>

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
 1c4:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
 1c6:	57 9a       	sbi	0x0a, 7	; 10
 1c8:	08 95       	ret

000001ca <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	81 ee       	ldi	r24, 0xE1	; 225
 1ce:	94 e0       	ldi	r25, 0x04	; 4
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <lcd_init_4f+0x6>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_init_4f+0x10>
 1da:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
 1dc:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
 1de:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
 1e0:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
 1e2:	80 e3       	ldi	r24, 0x30	; 48
 1e4:	70 df       	rcall	.-288    	; 0xc6 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	25 e3       	ldi	r18, 0x35	; 53
 1e8:	2a 95       	dec	r18
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_init_4f+0x1e>
 1ec:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
 1ee:	80 e3       	ldi	r24, 0x30	; 48
 1f0:	6a df       	rcall	.-300    	; 0xc6 <lcd_write_4>
 1f2:	8f e1       	ldi	r24, 0x1F	; 31
 1f4:	93 e0       	ldi	r25, 0x03	; 3
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_init_4f+0x2c>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lcd_init_4f+0x32>
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
 1fc:	00 00       	nop
 1fe:	80 e3       	ldi	r24, 0x30	; 48
 200:	62 df       	rcall	.-316    	; 0xc6 <lcd_write_4>
 202:	8f e3       	ldi	r24, 0x3F	; 63
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <lcd_init_4f+0x3c>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <lcd_init_4f+0x42>
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
 20c:	00 00       	nop
 20e:	88 e2       	ldi	r24, 0x28	; 40
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
 210:	5a df       	rcall	.-332    	; 0xc6 <lcd_write_4>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
 212:	be df       	rcall	.-132    	; 0x190 <lcd_check_BF_4>
 214:	88 e2       	ldi	r24, 0x28	; 40
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 216:	b0 df       	rcall	.-160    	; 0x178 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
 218:	bb df       	rcall	.-138    	; 0x190 <lcd_check_BF_4>

	/* Clear Display instruction */
	lcd_check_BF_4();
 21a:	88 e0       	ldi	r24, 0x08	; 8
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
 21c:	ad df       	rcall	.-166    	; 0x178 <lcd_write_instruction_4f>
 21e:	b8 df       	rcall	.-144    	; 0x190 <lcd_check_BF_4>
 220:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
 222:	aa df       	rcall	.-172    	; 0x178 <lcd_write_instruction_4f>
 224:	b5 df       	rcall	.-150    	; 0x190 <lcd_check_BF_4>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	a7 df       	rcall	.-178    	; 0x178 <lcd_write_instruction_4f>
 22a:	b2 df       	rcall	.-156    	; 0x190 <lcd_check_BF_4>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 22c:	8c e0       	ldi	r24, 0x0C	; 12
 22e:	a4 cf       	rjmp	.-184    	; 0x178 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
 230:	08 95       	ret

00000232 <initLCD>:
 232:	41 df       	rcall	.-382    	; 0xb6 <configLCDPorts>
 234:	ca df       	rcall	.-108    	; 0x1ca <lcd_init_4f>
 236:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	81 ee       	ldi	r24, 0xE1	; 225
 23a:	94 e0       	ldi	r25, 0x04	; 4
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <initLCD+0xa>
 244:	00 c0       	rjmp	.+0      	; 0x246 <initLCD+0x14>
 246:	00 00       	nop
 248:	08 95       	ret

0000024a <lcd_write_string_4f>:
 24a:	0f 93       	push	r16
Inputs:		string to be displayed (stringData)
Outputs:	none
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	00 d0       	rcall	.+0      	; 0x254 <lcd_write_string_4f+0xa>
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
 258:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // Character counter
 25a:	1a 82       	std	Y+2, r1	; 0x02
 25c:	19 82       	std	Y+1, r1	; 0x01
    while (stringData[i] != 0)
 25e:	e9 81       	ldd	r30, Y+1	; 0x01
 260:	fa 81       	ldd	r31, Y+2	; 0x02
 262:	e8 0f       	add	r30, r24
 264:	f9 1f       	adc	r31, r25
 266:	80 81       	ld	r24, Z
 268:	88 23       	and	r24, r24
 26a:	99 f0       	breq	.+38     	; 0x292 <lcd_write_string_4f+0x48>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
 26c:	91 df       	rcall	.-222    	; 0x190 <lcd_check_BF_4>
        lcd_write_character_4f(stringData[i]);
 26e:	e9 81       	ldd	r30, Y+1	; 0x01
 270:	fa 81       	ldd	r31, Y+2	; 0x02
 272:	e0 0f       	add	r30, r16
 274:	f1 1f       	adc	r31, r17
 276:	80 81       	ld	r24, Z
 278:	73 df       	rcall	.-282    	; 0x160 <lcd_write_character_4f>
        i++;
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	9a 81       	ldd	r25, Y+2	; 0x02
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	9a 83       	std	Y+2, r25	; 0x02
 282:	89 83       	std	Y+1, r24	; 0x01
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    volatile int i = 0;                             // Character counter
    while (stringData[i] != 0)
 284:	e9 81       	ldd	r30, Y+1	; 0x01
 286:	fa 81       	ldd	r31, Y+2	; 0x02
 288:	e0 0f       	add	r30, r16
 28a:	f1 1f       	adc	r31, r17
 28c:	80 81       	ld	r24, Z
 28e:	81 11       	cpse	r24, r1
 290:	ed cf       	rjmp	.-38     	; 0x26c <lcd_write_string_4f+0x22>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
        lcd_write_character_4f(stringData[i]);
        i++;
    }
}
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	08 95       	ret

000002a0 <updateLCDScreen>:
Inputs:		two pointers to a uint8 type data and 2 values, one for each row
Outputs:	none
Description:commands writing on LCD line by line 
******************************************************************** */
void updateLCDScreen(uint8_t row, char * s1, uint8_t data, char * s2)
{
 2a0:	df 92       	push	r13
 2a2:	ef 92       	push	r14
 2a4:	ff 92       	push	r15
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	af 97       	sbiw	r28, 0x2f	; 47
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
 2be:	18 2f       	mov	r17, r24
 2c0:	d6 2e       	mov	r13, r22
 2c2:	07 2f       	mov	r16, r23
 2c4:	84 2f       	mov	r24, r20
 2c6:	79 01       	movw	r14, r18
	/* convert data to string [buf] */
	char data2char[4] = "   ";
 2c8:	20 e2       	ldi	r18, 0x20	; 32
 2ca:	30 e2       	ldi	r19, 0x20	; 32
 2cc:	3a 83       	std	Y+2, r19	; 0x02
 2ce:	29 83       	std	Y+1, r18	; 0x01
 2d0:	20 e2       	ldi	r18, 0x20	; 32
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	3c 83       	std	Y+4, r19	; 0x04
 2d6:	2b 83       	std	Y+3, r18	; 0x03
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
 2d8:	96 e1       	ldi	r25, 0x16	; 22
 2da:	e4 e1       	ldi	r30, 0x14	; 20
 2dc:	f1 e0       	ldi	r31, 0x01	; 1
 2de:	de 01       	movw	r26, r28
 2e0:	5a 96       	adiw	r26, 0x1a	; 26
 2e2:	01 90       	ld	r0, Z+
 2e4:	0d 92       	st	X+, r0
 2e6:	9a 95       	dec	r25
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <updateLCDScreen+0x42>
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
 2ea:	4f 3f       	cpi	r20, 0xFF	; 255
 2ec:	31 f0       	breq	.+12     	; 0x2fa <updateLCDScreen+0x5a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2ee:	4a e0       	ldi	r20, 0x0A	; 10
 2f0:	be 01       	movw	r22, r28
 2f2:	6f 5f       	subi	r22, 0xFF	; 255
 2f4:	7f 4f       	sbci	r23, 0xFF	; 255
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	34 d1       	rcall	.+616    	; 0x562 <__itoa_ncheck>
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	71 e0       	ldi	r23, 0x01	; 1
 2fe:	8d 2d       	mov	r24, r13
 300:	90 2f       	mov	r25, r16
 302:	26 d1       	rcall	.+588    	; 0x550 <strcmp>
 304:	89 2b       	or	r24, r25
 306:	09 f4       	brne	.+2      	; 0x30a <updateLCDScreen+0x6a>
 308:	ac c0       	rjmp	.+344    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	71 e0       	ldi	r23, 0x01	; 1
 30e:	c7 01       	movw	r24, r14
 310:	1f d1       	rcall	.+574    	; 0x550 <strcmp>
 312:	89 2b       	or	r24, r25
 314:	31 f4       	brne	.+12     	; 0x322 <updateLCDScreen+0x82>
 316:	0f 2e       	mov	r0, r31
 318:	f9 e2       	ldi	r31, 0x29	; 41
 31a:	ef 2e       	mov	r14, r31
 31c:	f1 e0       	ldi	r31, 0x01	; 1
 31e:	ff 2e       	mov	r15, r31
 320:	f0 2d       	mov	r31, r0
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 322:	ce 01       	movw	r24, r28
 324:	4a 96       	adiw	r24, 0x1a	; 26
 326:	9f 93       	push	r25
 328:	8f 93       	push	r24
 32a:	ff 92       	push	r15
 32c:	ef 92       	push	r14
 32e:	49 97       	sbiw	r24, 0x19	; 25
 330:	9f 93       	push	r25
 332:	8f 93       	push	r24
 334:	0f 93       	push	r16
 336:	df 92       	push	r13
 338:	85 e0       	ldi	r24, 0x05	; 5
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	9f 93       	push	r25
 33e:	8f 93       	push	r24
 340:	1f 92       	push	r1
 342:	85 e1       	ldi	r24, 0x15	; 21
 344:	8f 93       	push	r24
 346:	ce 01       	movw	r24, r28
 348:	05 96       	adiw	r24, 0x05	; 5
 34a:	9f 93       	push	r25
 34c:	8f 93       	push	r24
 34e:	2c d1       	rcall	.+600    	; 0x5a8 <snprintf>
	if (strcmp(s1, "CLEAR") == 0 ) { snprintf( charRow, sizeof charRow, "%s", emptyString ); };
 350:	6e e0       	ldi	r22, 0x0E	; 14
 352:	71 e0       	ldi	r23, 0x01	; 1
 354:	8d 2d       	mov	r24, r13
 356:	90 2f       	mov	r25, r16
 358:	fb d0       	rcall	.+502    	; 0x550 <strcmp>
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
 364:	89 2b       	or	r24, r25
 366:	a9 f4       	brne	.+42     	; 0x392 <updateLCDScreen+0xf2>
 368:	ce 01       	movw	r24, r28
 36a:	4a 96       	adiw	r24, 0x1a	; 26
 36c:	9f 93       	push	r25
 36e:	8f 93       	push	r24
 370:	8b e0       	ldi	r24, 0x0B	; 11
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	9f 93       	push	r25
 376:	8f 93       	push	r24
 378:	1f 92       	push	r1
 37a:	85 e1       	ldi	r24, 0x15	; 21
 37c:	8f 93       	push	r24
 37e:	ce 01       	movw	r24, r28
 380:	05 96       	adiw	r24, 0x05	; 5
 382:	9f 93       	push	r25
 384:	8f 93       	push	r24
 386:	10 d1       	rcall	.+544    	; 0x5a8 <snprintf>
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	f8 94       	cli
 38c:	de bf       	out	0x3e, r29	; 62
 38e:	0f be       	out	0x3f, r0	; 63
 390:	cd bf       	out	0x3d, r28	; 61
		
	switch(row) {
 392:	12 30       	cpi	r17, 0x02	; 2
 394:	a9 f0       	breq	.+42     	; 0x3c0 <updateLCDScreen+0x120>
 396:	18 f4       	brcc	.+6      	; 0x39e <updateLCDScreen+0xfe>
 398:	11 30       	cpi	r17, 0x01	; 1
 39a:	31 f0       	breq	.+12     	; 0x3a8 <updateLCDScreen+0x108>
 39c:	34 c0       	rjmp	.+104    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 39e:	13 30       	cpi	r17, 0x03	; 3
 3a0:	d9 f0       	breq	.+54     	; 0x3d8 <updateLCDScreen+0x138>
 3a2:	14 30       	cpi	r17, 0x04	; 4
 3a4:	29 f1       	breq	.+74     	; 0x3f0 <updateLCDScreen+0x150>
		case 1: /* ======= Line 1 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne); _delay_ms(50);
 3a6:	2f c0       	rjmp	.+94     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3a8:	80 e8       	ldi	r24, 0x80	; 128
 3aa:	e6 de       	rcall	.-564    	; 0x178 <lcd_write_instruction_4f>
 3ac:	9f ef       	ldi	r25, 0xFF	; 255
 3ae:	20 e7       	ldi	r18, 0x70	; 112
 3b0:	32 e0       	ldi	r19, 0x02	; 2
 3b2:	91 50       	subi	r25, 0x01	; 1
 3b4:	20 40       	sbci	r18, 0x00	; 0
 3b6:	30 40       	sbci	r19, 0x00	; 0
 3b8:	e1 f7       	brne	.-8      	; 0x3b2 <updateLCDScreen+0x112>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <updateLCDScreen+0x11c>
 3bc:	00 00       	nop
			break;
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo); _delay_ms(50);
 3be:	23 c0       	rjmp	.+70     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3c0:	80 ec       	ldi	r24, 0xC0	; 192
 3c2:	da de       	rcall	.-588    	; 0x178 <lcd_write_instruction_4f>
 3c4:	8f ef       	ldi	r24, 0xFF	; 255
 3c6:	90 e7       	ldi	r25, 0x70	; 112
 3c8:	22 e0       	ldi	r18, 0x02	; 2
 3ca:	81 50       	subi	r24, 0x01	; 1
 3cc:	90 40       	sbci	r25, 0x00	; 0
 3ce:	20 40       	sbci	r18, 0x00	; 0
 3d0:	e1 f7       	brne	.-8      	; 0x3ca <updateLCDScreen+0x12a>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <updateLCDScreen+0x134>
 3d4:	00 00       	nop
			break;
		case 3: /* ======= Line 3 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineThree); _delay_ms(50);
 3d6:	17 c0       	rjmp	.+46     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3d8:	84 e9       	ldi	r24, 0x94	; 148
 3da:	ce de       	rcall	.-612    	; 0x178 <lcd_write_instruction_4f>
 3dc:	3f ef       	ldi	r19, 0xFF	; 255
 3de:	80 e7       	ldi	r24, 0x70	; 112
 3e0:	92 e0       	ldi	r25, 0x02	; 2
 3e2:	31 50       	subi	r19, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <updateLCDScreen+0x142>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <updateLCDScreen+0x14c>
 3ec:	00 00       	nop
			break;
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
 3ee:	0b c0       	rjmp	.+22     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3f0:	84 ed       	ldi	r24, 0xD4	; 212
 3f2:	c2 de       	rcall	.-636    	; 0x178 <lcd_write_instruction_4f>
 3f4:	2f ef       	ldi	r18, 0xFF	; 255
 3f6:	30 e7       	ldi	r19, 0x70	; 112
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	30 40       	sbci	r19, 0x00	; 0
 3fe:	80 40       	sbci	r24, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <updateLCDScreen+0x15a>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
 404:	00 00       	nop
 406:	ce 01       	movw	r24, r28
 408:	05 96       	adiw	r24, 0x05	; 5
 40a:	1f df       	rcall	.-450    	; 0x24a <lcd_write_string_4f>
 40c:	9f ef       	ldi	r25, 0xFF	; 255
 40e:	20 e7       	ldi	r18, 0x70	; 112
 410:	32 e0       	ldi	r19, 0x02	; 2
 412:	91 50       	subi	r25, 0x01	; 1
 414:	20 40       	sbci	r18, 0x00	; 0
 416:	30 40       	sbci	r19, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
}
 41e:	46 c0       	rjmp	.+140    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 420:	ce 01       	movw	r24, r28
 422:	4a 96       	adiw	r24, 0x1a	; 26
 424:	9f 93       	push	r25
 426:	8f 93       	push	r24
 428:	89 e2       	ldi	r24, 0x29	; 41
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	9f 93       	push	r25
 42e:	8f 93       	push	r24
 430:	9e 01       	movw	r18, r28
 432:	2f 5f       	subi	r18, 0xFF	; 255
 434:	3f 4f       	sbci	r19, 0xFF	; 255
 436:	3f 93       	push	r19
 438:	2f 93       	push	r18
 43a:	9f 93       	push	r25
 43c:	8f 93       	push	r24
 43e:	85 e0       	ldi	r24, 0x05	; 5
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	9f 93       	push	r25
 444:	8f 93       	push	r24
 446:	1f 92       	push	r1
 448:	85 e1       	ldi	r24, 0x15	; 21
 44a:	8f 93       	push	r24
 44c:	ce 01       	movw	r24, r28
 44e:	05 96       	adiw	r24, 0x05	; 5
 450:	9f 93       	push	r25
 452:	8f 93       	push	r24
 454:	a9 d0       	rcall	.+338    	; 0x5a8 <snprintf>
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	de bf       	out	0x3e, r29	; 62
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	cd bf       	out	0x3d, r28	; 61
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
 460:	98 cf       	rjmp	.-208    	; 0x392 <updateLCDScreen+0xf2>
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	71 e0       	ldi	r23, 0x01	; 1
 466:	c7 01       	movw	r24, r14
 468:	73 d0       	rcall	.+230    	; 0x550 <strcmp>
 46a:	89 2b       	or	r24, r25
 46c:	c9 f2       	breq	.-78     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 46e:	ce 01       	movw	r24, r28
 470:	4a 96       	adiw	r24, 0x1a	; 26
 472:	9f 93       	push	r25
 474:	8f 93       	push	r24
 476:	ff 92       	push	r15
 478:	ef 92       	push	r14
 47a:	49 97       	sbiw	r24, 0x19	; 25
 47c:	9f 93       	push	r25
 47e:	8f 93       	push	r24
 480:	89 e2       	ldi	r24, 0x29	; 41
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	9f 93       	push	r25
 486:	8f 93       	push	r24
 488:	85 e0       	ldi	r24, 0x05	; 5
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	9f 93       	push	r25
 48e:	8f 93       	push	r24
 490:	1f 92       	push	r1
 492:	85 e1       	ldi	r24, 0x15	; 21
 494:	8f 93       	push	r24
 496:	ce 01       	movw	r24, r28
 498:	05 96       	adiw	r24, 0x05	; 5
 49a:	9f 93       	push	r25
 49c:	8f 93       	push	r24
 49e:	84 d0       	rcall	.+264    	; 0x5a8 <snprintf>
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	f8 94       	cli
 4a4:	de bf       	out	0x3e, r29	; 62
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	cd bf       	out	0x3d, r28	; 61
 4aa:	73 cf       	rjmp	.-282    	; 0x392 <updateLCDScreen+0xf2>
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
}
 4ac:	af 96       	adiw	r28, 0x2f	; 47
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	f8 94       	cli
 4b2:	de bf       	out	0x3e, r29	; 62
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	cd bf       	out	0x3d, r28	; 61
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	ff 90       	pop	r15
 4c2:	ef 90       	pop	r14
 4c4:	df 90       	pop	r13
 4c6:	08 95       	ret

000004c8 <displayLCD_main>:
Description:displays on the screen the data passed to the input
******************************************************************** */
void displayLCD_main(uint8_t drow, char * s1, uint8_t d1, char * s2)
{
	/* Write text on the LCD */
	updateLCDScreen(drow, s1, d1, s2);
 4c8:	eb ce       	rjmp	.-554    	; 0x2a0 <updateLCDScreen>
 4ca:	08 95       	ret

000004cc <main>:

/*-------------- Main function ----------------*/
int main (void)
{
#if LCD_AVAIL
	initLCD();		// LED initialization
 4cc:	b2 de       	rcall	.-668    	; 0x232 <initLCD>
#endif
	unsigned char i2c_res = 99;
	uint8_t i = 0;
	i2c_init();		// i2c initialization
 4ce:	e0 dd       	rcall	.-1088   	; 0x90 <i2c_init>
	i2c_set_address();
 4d0:	e5 dd       	rcall	.-1078   	; 0x9c <i2c_set_address>
 4d2:	20 e0       	ldi	r18, 0x00	; 0
displayLCD_main(1, "Init complete", NONE, "NONE");
 4d4:	31 e0       	ldi	r19, 0x01	; 1
 4d6:	4f ef       	ldi	r20, 0xFF	; 255
 4d8:	6a e2       	ldi	r22, 0x2A	; 42
 4da:	71 e0       	ldi	r23, 0x01	; 1
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	f4 df       	rcall	.-24     	; 0x4c8 <displayLCD_main>
 4e0:	c0 e0       	ldi	r28, 0x00	; 0
{
#if LCD_AVAIL
	initLCD();		// LED initialization
#endif
	unsigned char i2c_res = 99;
	uint8_t i = 0;
 4e2:	0f 2e       	mov	r0, r31
	{	
		i += 1;
		i2c_start_SR();
#if LCD_AVAIL
		displayLCD_main(1, "Iteration: ", i, "NONE");
		displayLCD_main(2, "TWSR: ", TWSR, "NONE");
 4e4:	f9 eb       	ldi	r31, 0xB9	; 185
 4e6:	cf 2e       	mov	r12, r31
 4e8:	d1 2c       	mov	r13, r1
 4ea:	f0 2d       	mov	r31, r0
 4ec:	0f 2e       	mov	r0, r31
		displayLCD_main(3, "TWDR: ", TWDR, "NONE");
 4ee:	fb eb       	ldi	r31, 0xBB	; 187
 4f0:	ef 2e       	mov	r14, r31
 4f2:	f1 2c       	mov	r15, r1
 4f4:	f0 2d       	mov	r31, r0
		displayLCD_main(4, "TWCR: ", TWCR, "NONE");
 4f6:	0c eb       	ldi	r16, 0xBC	; 188
 4f8:	10 e0       	ldi	r17, 0x00	; 0
	i2c_set_address();
displayLCD_main(1, "Init complete", NONE, "NONE");

	while (1)
	{	
		i += 1;
 4fa:	cf 5f       	subi	r28, 0xFF	; 255
		i2c_start_SR();
 4fc:	d3 dd       	rcall	.-1114   	; 0xa4 <i2c_start_SR>
 4fe:	20 e0       	ldi	r18, 0x00	; 0
#if LCD_AVAIL
		displayLCD_main(1, "Iteration: ", i, "NONE");
 500:	31 e0       	ldi	r19, 0x01	; 1
 502:	4c 2f       	mov	r20, r28
 504:	68 e3       	ldi	r22, 0x38	; 56
 506:	71 e0       	ldi	r23, 0x01	; 1
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	de df       	rcall	.-68     	; 0x4c8 <displayLCD_main>
 50c:	f6 01       	movw	r30, r12
		displayLCD_main(2, "TWSR: ", TWSR, "NONE");
 50e:	40 81       	ld	r20, Z
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	31 e0       	ldi	r19, 0x01	; 1
 514:	64 e4       	ldi	r22, 0x44	; 68
 516:	71 e0       	ldi	r23, 0x01	; 1
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	d6 df       	rcall	.-84     	; 0x4c8 <displayLCD_main>
 51c:	f7 01       	movw	r30, r14
		displayLCD_main(3, "TWDR: ", TWDR, "NONE");
 51e:	40 81       	ld	r20, Z
 520:	20 e0       	ldi	r18, 0x00	; 0
 522:	31 e0       	ldi	r19, 0x01	; 1
 524:	6b e4       	ldi	r22, 0x4B	; 75
 526:	71 e0       	ldi	r23, 0x01	; 1
 528:	83 e0       	ldi	r24, 0x03	; 3
 52a:	ce df       	rcall	.-100    	; 0x4c8 <displayLCD_main>
 52c:	f8 01       	movw	r30, r16
		displayLCD_main(4, "TWCR: ", TWCR, "NONE");
 52e:	40 81       	ld	r20, Z
 530:	20 e0       	ldi	r18, 0x00	; 0
 532:	31 e0       	ldi	r19, 0x01	; 1
 534:	62 e5       	ldi	r22, 0x52	; 82
 536:	71 e0       	ldi	r23, 0x01	; 1
 538:	84 e0       	ldi	r24, 0x04	; 4
 53a:	c6 df       	rcall	.-116    	; 0x4c8 <displayLCD_main>
 53c:	ff ef       	ldi	r31, 0xFF	; 255
 53e:	23 e2       	ldi	r18, 0x23	; 35
 540:	84 ef       	ldi	r24, 0xF4	; 244
 542:	f1 50       	subi	r31, 0x01	; 1
 544:	20 40       	sbci	r18, 0x00	; 0
 546:	80 40       	sbci	r24, 0x00	; 0
 548:	e1 f7       	brne	.-8      	; 0x542 <main+0x76>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <main+0x80>
 54c:	00 00       	nop
 54e:	d5 cf       	rjmp	.-86     	; 0x4fa <main+0x2e>

00000550 <strcmp>:
 550:	fb 01       	movw	r30, r22
 552:	dc 01       	movw	r26, r24
 554:	8d 91       	ld	r24, X+
 556:	01 90       	ld	r0, Z+
 558:	80 19       	sub	r24, r0
 55a:	01 10       	cpse	r0, r1
 55c:	d9 f3       	breq	.-10     	; 0x554 <strcmp+0x4>
 55e:	99 0b       	sbc	r25, r25
 560:	08 95       	ret

00000562 <__itoa_ncheck>:
 562:	bb 27       	eor	r27, r27
 564:	4a 30       	cpi	r20, 0x0A	; 10
 566:	31 f4       	brne	.+12     	; 0x574 <__itoa_ncheck+0x12>
 568:	99 23       	and	r25, r25
 56a:	22 f4       	brpl	.+8      	; 0x574 <__itoa_ncheck+0x12>
 56c:	bd e2       	ldi	r27, 0x2D	; 45
 56e:	90 95       	com	r25
 570:	81 95       	neg	r24
 572:	9f 4f       	sbci	r25, 0xFF	; 255
 574:	01 c0       	rjmp	.+2      	; 0x578 <__utoa_common>

00000576 <__utoa_ncheck>:
 576:	bb 27       	eor	r27, r27

00000578 <__utoa_common>:
 578:	fb 01       	movw	r30, r22
 57a:	55 27       	eor	r21, r21
 57c:	aa 27       	eor	r26, r26
 57e:	88 0f       	add	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	aa 1f       	adc	r26, r26
 584:	a4 17       	cp	r26, r20
 586:	10 f0       	brcs	.+4      	; 0x58c <__utoa_common+0x14>
 588:	a4 1b       	sub	r26, r20
 58a:	83 95       	inc	r24
 58c:	50 51       	subi	r21, 0x10	; 16
 58e:	b9 f7       	brne	.-18     	; 0x57e <__utoa_common+0x6>
 590:	a0 5d       	subi	r26, 0xD0	; 208
 592:	aa 33       	cpi	r26, 0x3A	; 58
 594:	08 f0       	brcs	.+2      	; 0x598 <__utoa_common+0x20>
 596:	a9 5d       	subi	r26, 0xD9	; 217
 598:	a1 93       	st	Z+, r26
 59a:	00 97       	sbiw	r24, 0x00	; 0
 59c:	79 f7       	brne	.-34     	; 0x57c <__utoa_common+0x4>
 59e:	b1 11       	cpse	r27, r1
 5a0:	b1 93       	st	Z+, r27
 5a2:	11 92       	st	Z+, r1
 5a4:	cb 01       	movw	r24, r22
 5a6:	15 c2       	rjmp	.+1066   	; 0x9d2 <strrev>

000005a8 <snprintf>:
 5a8:	ae e0       	ldi	r26, 0x0E	; 14
 5aa:	b0 e0       	ldi	r27, 0x00	; 0
 5ac:	e9 ed       	ldi	r30, 0xD9	; 217
 5ae:	f2 e0       	ldi	r31, 0x02	; 2
 5b0:	c8 c2       	rjmp	.+1424   	; 0xb42 <__prologue_saves__+0x1c>
 5b2:	0d 89       	ldd	r16, Y+21	; 0x15
 5b4:	1e 89       	ldd	r17, Y+22	; 0x16
 5b6:	8f 89       	ldd	r24, Y+23	; 0x17
 5b8:	98 8d       	ldd	r25, Y+24	; 0x18
 5ba:	26 e0       	ldi	r18, 0x06	; 6
 5bc:	2c 83       	std	Y+4, r18	; 0x04
 5be:	1a 83       	std	Y+2, r17	; 0x02
 5c0:	09 83       	std	Y+1, r16	; 0x01
 5c2:	97 ff       	sbrs	r25, 7
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <snprintf+0x22>
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	90 e8       	ldi	r25, 0x80	; 128
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	9e 83       	std	Y+6, r25	; 0x06
 5ce:	8d 83       	std	Y+5, r24	; 0x05
 5d0:	ae 01       	movw	r20, r28
 5d2:	45 5e       	subi	r20, 0xE5	; 229
 5d4:	5f 4f       	sbci	r21, 0xFF	; 255
 5d6:	69 8d       	ldd	r22, Y+25	; 0x19
 5d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
 5da:	ce 01       	movw	r24, r28
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	11 d0       	rcall	.+34     	; 0x602 <vfprintf>
 5e0:	4d 81       	ldd	r20, Y+5	; 0x05
 5e2:	5e 81       	ldd	r21, Y+6	; 0x06
 5e4:	57 fd       	sbrc	r21, 7
 5e6:	0a c0       	rjmp	.+20     	; 0x5fc <snprintf+0x54>
 5e8:	2f 81       	ldd	r18, Y+7	; 0x07
 5ea:	38 85       	ldd	r19, Y+8	; 0x08
 5ec:	42 17       	cp	r20, r18
 5ee:	53 07       	cpc	r21, r19
 5f0:	0c f4       	brge	.+2      	; 0x5f4 <snprintf+0x4c>
 5f2:	9a 01       	movw	r18, r20
 5f4:	f8 01       	movw	r30, r16
 5f6:	e2 0f       	add	r30, r18
 5f8:	f3 1f       	adc	r31, r19
 5fa:	10 82       	st	Z, r1
 5fc:	2e 96       	adiw	r28, 0x0e	; 14
 5fe:	e4 e0       	ldi	r30, 0x04	; 4
 600:	bc c2       	rjmp	.+1400   	; 0xb7a <__epilogue_restores__+0x1c>

00000602 <vfprintf>:
 602:	ab e0       	ldi	r26, 0x0B	; 11
 604:	b0 e0       	ldi	r27, 0x00	; 0
 606:	e6 e0       	ldi	r30, 0x06	; 6
 608:	f3 e0       	ldi	r31, 0x03	; 3
 60a:	8d c2       	rjmp	.+1306   	; 0xb26 <__prologue_saves__>
 60c:	6c 01       	movw	r12, r24
 60e:	7b 01       	movw	r14, r22
 610:	8a 01       	movw	r16, r20
 612:	fc 01       	movw	r30, r24
 614:	17 82       	std	Z+7, r1	; 0x07
 616:	16 82       	std	Z+6, r1	; 0x06
 618:	83 81       	ldd	r24, Z+3	; 0x03
 61a:	81 ff       	sbrs	r24, 1
 61c:	bf c1       	rjmp	.+894    	; 0x99c <__stack+0x9d>
 61e:	ce 01       	movw	r24, r28
 620:	01 96       	adiw	r24, 0x01	; 1
 622:	3c 01       	movw	r6, r24
 624:	f6 01       	movw	r30, r12
 626:	93 81       	ldd	r25, Z+3	; 0x03
 628:	f7 01       	movw	r30, r14
 62a:	93 fd       	sbrc	r25, 3
 62c:	85 91       	lpm	r24, Z+
 62e:	93 ff       	sbrs	r25, 3
 630:	81 91       	ld	r24, Z+
 632:	7f 01       	movw	r14, r30
 634:	88 23       	and	r24, r24
 636:	09 f4       	brne	.+2      	; 0x63a <vfprintf+0x38>
 638:	ad c1       	rjmp	.+858    	; 0x994 <__stack+0x95>
 63a:	85 32       	cpi	r24, 0x25	; 37
 63c:	39 f4       	brne	.+14     	; 0x64c <vfprintf+0x4a>
 63e:	93 fd       	sbrc	r25, 3
 640:	85 91       	lpm	r24, Z+
 642:	93 ff       	sbrs	r25, 3
 644:	81 91       	ld	r24, Z+
 646:	7f 01       	movw	r14, r30
 648:	85 32       	cpi	r24, 0x25	; 37
 64a:	21 f4       	brne	.+8      	; 0x654 <vfprintf+0x52>
 64c:	b6 01       	movw	r22, r12
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	d0 d1       	rcall	.+928    	; 0x9f2 <fputc>
 652:	e8 cf       	rjmp	.-48     	; 0x624 <vfprintf+0x22>
 654:	91 2c       	mov	r9, r1
 656:	21 2c       	mov	r2, r1
 658:	31 2c       	mov	r3, r1
 65a:	ff e1       	ldi	r31, 0x1F	; 31
 65c:	f3 15       	cp	r31, r3
 65e:	d8 f0       	brcs	.+54     	; 0x696 <vfprintf+0x94>
 660:	8b 32       	cpi	r24, 0x2B	; 43
 662:	79 f0       	breq	.+30     	; 0x682 <vfprintf+0x80>
 664:	38 f4       	brcc	.+14     	; 0x674 <vfprintf+0x72>
 666:	80 32       	cpi	r24, 0x20	; 32
 668:	79 f0       	breq	.+30     	; 0x688 <vfprintf+0x86>
 66a:	83 32       	cpi	r24, 0x23	; 35
 66c:	a1 f4       	brne	.+40     	; 0x696 <vfprintf+0x94>
 66e:	23 2d       	mov	r18, r3
 670:	20 61       	ori	r18, 0x10	; 16
 672:	1d c0       	rjmp	.+58     	; 0x6ae <vfprintf+0xac>
 674:	8d 32       	cpi	r24, 0x2D	; 45
 676:	61 f0       	breq	.+24     	; 0x690 <vfprintf+0x8e>
 678:	80 33       	cpi	r24, 0x30	; 48
 67a:	69 f4       	brne	.+26     	; 0x696 <vfprintf+0x94>
 67c:	23 2d       	mov	r18, r3
 67e:	21 60       	ori	r18, 0x01	; 1
 680:	16 c0       	rjmp	.+44     	; 0x6ae <vfprintf+0xac>
 682:	83 2d       	mov	r24, r3
 684:	82 60       	ori	r24, 0x02	; 2
 686:	38 2e       	mov	r3, r24
 688:	e3 2d       	mov	r30, r3
 68a:	e4 60       	ori	r30, 0x04	; 4
 68c:	3e 2e       	mov	r3, r30
 68e:	2a c0       	rjmp	.+84     	; 0x6e4 <vfprintf+0xe2>
 690:	f3 2d       	mov	r31, r3
 692:	f8 60       	ori	r31, 0x08	; 8
 694:	1d c0       	rjmp	.+58     	; 0x6d0 <vfprintf+0xce>
 696:	37 fc       	sbrc	r3, 7
 698:	2d c0       	rjmp	.+90     	; 0x6f4 <vfprintf+0xf2>
 69a:	20 ed       	ldi	r18, 0xD0	; 208
 69c:	28 0f       	add	r18, r24
 69e:	2a 30       	cpi	r18, 0x0A	; 10
 6a0:	40 f0       	brcs	.+16     	; 0x6b2 <vfprintf+0xb0>
 6a2:	8e 32       	cpi	r24, 0x2E	; 46
 6a4:	b9 f4       	brne	.+46     	; 0x6d4 <vfprintf+0xd2>
 6a6:	36 fc       	sbrc	r3, 6
 6a8:	75 c1       	rjmp	.+746    	; 0x994 <__stack+0x95>
 6aa:	23 2d       	mov	r18, r3
 6ac:	20 64       	ori	r18, 0x40	; 64
 6ae:	32 2e       	mov	r3, r18
 6b0:	19 c0       	rjmp	.+50     	; 0x6e4 <vfprintf+0xe2>
 6b2:	36 fe       	sbrs	r3, 6
 6b4:	06 c0       	rjmp	.+12     	; 0x6c2 <vfprintf+0xc0>
 6b6:	8a e0       	ldi	r24, 0x0A	; 10
 6b8:	98 9e       	mul	r9, r24
 6ba:	20 0d       	add	r18, r0
 6bc:	11 24       	eor	r1, r1
 6be:	92 2e       	mov	r9, r18
 6c0:	11 c0       	rjmp	.+34     	; 0x6e4 <vfprintf+0xe2>
 6c2:	ea e0       	ldi	r30, 0x0A	; 10
 6c4:	2e 9e       	mul	r2, r30
 6c6:	20 0d       	add	r18, r0
 6c8:	11 24       	eor	r1, r1
 6ca:	22 2e       	mov	r2, r18
 6cc:	f3 2d       	mov	r31, r3
 6ce:	f0 62       	ori	r31, 0x20	; 32
 6d0:	3f 2e       	mov	r3, r31
 6d2:	08 c0       	rjmp	.+16     	; 0x6e4 <vfprintf+0xe2>
 6d4:	8c 36       	cpi	r24, 0x6C	; 108
 6d6:	21 f4       	brne	.+8      	; 0x6e0 <vfprintf+0xde>
 6d8:	83 2d       	mov	r24, r3
 6da:	80 68       	ori	r24, 0x80	; 128
 6dc:	38 2e       	mov	r3, r24
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <vfprintf+0xe2>
 6e0:	88 36       	cpi	r24, 0x68	; 104
 6e2:	41 f4       	brne	.+16     	; 0x6f4 <vfprintf+0xf2>
 6e4:	f7 01       	movw	r30, r14
 6e6:	93 fd       	sbrc	r25, 3
 6e8:	85 91       	lpm	r24, Z+
 6ea:	93 ff       	sbrs	r25, 3
 6ec:	81 91       	ld	r24, Z+
 6ee:	7f 01       	movw	r14, r30
 6f0:	81 11       	cpse	r24, r1
 6f2:	b3 cf       	rjmp	.-154    	; 0x65a <vfprintf+0x58>
 6f4:	98 2f       	mov	r25, r24
 6f6:	9f 7d       	andi	r25, 0xDF	; 223
 6f8:	95 54       	subi	r25, 0x45	; 69
 6fa:	93 30       	cpi	r25, 0x03	; 3
 6fc:	28 f4       	brcc	.+10     	; 0x708 <vfprintf+0x106>
 6fe:	0c 5f       	subi	r16, 0xFC	; 252
 700:	1f 4f       	sbci	r17, 0xFF	; 255
 702:	9f e3       	ldi	r25, 0x3F	; 63
 704:	99 83       	std	Y+1, r25	; 0x01
 706:	0d c0       	rjmp	.+26     	; 0x722 <vfprintf+0x120>
 708:	83 36       	cpi	r24, 0x63	; 99
 70a:	31 f0       	breq	.+12     	; 0x718 <vfprintf+0x116>
 70c:	83 37       	cpi	r24, 0x73	; 115
 70e:	71 f0       	breq	.+28     	; 0x72c <vfprintf+0x12a>
 710:	83 35       	cpi	r24, 0x53	; 83
 712:	09 f0       	breq	.+2      	; 0x716 <vfprintf+0x114>
 714:	55 c0       	rjmp	.+170    	; 0x7c0 <vfprintf+0x1be>
 716:	20 c0       	rjmp	.+64     	; 0x758 <vfprintf+0x156>
 718:	f8 01       	movw	r30, r16
 71a:	80 81       	ld	r24, Z
 71c:	89 83       	std	Y+1, r24	; 0x01
 71e:	0e 5f       	subi	r16, 0xFE	; 254
 720:	1f 4f       	sbci	r17, 0xFF	; 255
 722:	88 24       	eor	r8, r8
 724:	83 94       	inc	r8
 726:	91 2c       	mov	r9, r1
 728:	53 01       	movw	r10, r6
 72a:	12 c0       	rjmp	.+36     	; 0x750 <vfprintf+0x14e>
 72c:	28 01       	movw	r4, r16
 72e:	f2 e0       	ldi	r31, 0x02	; 2
 730:	4f 0e       	add	r4, r31
 732:	51 1c       	adc	r5, r1
 734:	f8 01       	movw	r30, r16
 736:	a0 80       	ld	r10, Z
 738:	b1 80       	ldd	r11, Z+1	; 0x01
 73a:	36 fe       	sbrs	r3, 6
 73c:	03 c0       	rjmp	.+6      	; 0x744 <vfprintf+0x142>
 73e:	69 2d       	mov	r22, r9
 740:	70 e0       	ldi	r23, 0x00	; 0
 742:	02 c0       	rjmp	.+4      	; 0x748 <vfprintf+0x146>
 744:	6f ef       	ldi	r22, 0xFF	; 255
 746:	7f ef       	ldi	r23, 0xFF	; 255
 748:	c5 01       	movw	r24, r10
 74a:	38 d1       	rcall	.+624    	; 0x9bc <strnlen>
 74c:	4c 01       	movw	r8, r24
 74e:	82 01       	movw	r16, r4
 750:	f3 2d       	mov	r31, r3
 752:	ff 77       	andi	r31, 0x7F	; 127
 754:	3f 2e       	mov	r3, r31
 756:	15 c0       	rjmp	.+42     	; 0x782 <vfprintf+0x180>
 758:	28 01       	movw	r4, r16
 75a:	22 e0       	ldi	r18, 0x02	; 2
 75c:	42 0e       	add	r4, r18
 75e:	51 1c       	adc	r5, r1
 760:	f8 01       	movw	r30, r16
 762:	a0 80       	ld	r10, Z
 764:	b1 80       	ldd	r11, Z+1	; 0x01
 766:	36 fe       	sbrs	r3, 6
 768:	03 c0       	rjmp	.+6      	; 0x770 <vfprintf+0x16e>
 76a:	69 2d       	mov	r22, r9
 76c:	70 e0       	ldi	r23, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <vfprintf+0x172>
 770:	6f ef       	ldi	r22, 0xFF	; 255
 772:	7f ef       	ldi	r23, 0xFF	; 255
 774:	c5 01       	movw	r24, r10
 776:	17 d1       	rcall	.+558    	; 0x9a6 <strnlen_P>
 778:	4c 01       	movw	r8, r24
 77a:	f3 2d       	mov	r31, r3
 77c:	f0 68       	ori	r31, 0x80	; 128
 77e:	3f 2e       	mov	r3, r31
 780:	82 01       	movw	r16, r4
 782:	33 fc       	sbrc	r3, 3
 784:	19 c0       	rjmp	.+50     	; 0x7b8 <vfprintf+0x1b6>
 786:	82 2d       	mov	r24, r2
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	88 16       	cp	r8, r24
 78c:	99 06       	cpc	r9, r25
 78e:	a0 f4       	brcc	.+40     	; 0x7b8 <vfprintf+0x1b6>
 790:	b6 01       	movw	r22, r12
 792:	80 e2       	ldi	r24, 0x20	; 32
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	2d d1       	rcall	.+602    	; 0x9f2 <fputc>
 798:	2a 94       	dec	r2
 79a:	f5 cf       	rjmp	.-22     	; 0x786 <vfprintf+0x184>
 79c:	f5 01       	movw	r30, r10
 79e:	37 fc       	sbrc	r3, 7
 7a0:	85 91       	lpm	r24, Z+
 7a2:	37 fe       	sbrs	r3, 7
 7a4:	81 91       	ld	r24, Z+
 7a6:	5f 01       	movw	r10, r30
 7a8:	b6 01       	movw	r22, r12
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	22 d1       	rcall	.+580    	; 0x9f2 <fputc>
 7ae:	21 10       	cpse	r2, r1
 7b0:	2a 94       	dec	r2
 7b2:	21 e0       	ldi	r18, 0x01	; 1
 7b4:	82 1a       	sub	r8, r18
 7b6:	91 08       	sbc	r9, r1
 7b8:	81 14       	cp	r8, r1
 7ba:	91 04       	cpc	r9, r1
 7bc:	79 f7       	brne	.-34     	; 0x79c <vfprintf+0x19a>
 7be:	e1 c0       	rjmp	.+450    	; 0x982 <__stack+0x83>
 7c0:	84 36       	cpi	r24, 0x64	; 100
 7c2:	11 f0       	breq	.+4      	; 0x7c8 <vfprintf+0x1c6>
 7c4:	89 36       	cpi	r24, 0x69	; 105
 7c6:	39 f5       	brne	.+78     	; 0x816 <vfprintf+0x214>
 7c8:	f8 01       	movw	r30, r16
 7ca:	37 fe       	sbrs	r3, 7
 7cc:	07 c0       	rjmp	.+14     	; 0x7dc <vfprintf+0x1da>
 7ce:	60 81       	ld	r22, Z
 7d0:	71 81       	ldd	r23, Z+1	; 0x01
 7d2:	82 81       	ldd	r24, Z+2	; 0x02
 7d4:	93 81       	ldd	r25, Z+3	; 0x03
 7d6:	0c 5f       	subi	r16, 0xFC	; 252
 7d8:	1f 4f       	sbci	r17, 0xFF	; 255
 7da:	08 c0       	rjmp	.+16     	; 0x7ec <vfprintf+0x1ea>
 7dc:	60 81       	ld	r22, Z
 7de:	71 81       	ldd	r23, Z+1	; 0x01
 7e0:	07 2e       	mov	r0, r23
 7e2:	00 0c       	add	r0, r0
 7e4:	88 0b       	sbc	r24, r24
 7e6:	99 0b       	sbc	r25, r25
 7e8:	0e 5f       	subi	r16, 0xFE	; 254
 7ea:	1f 4f       	sbci	r17, 0xFF	; 255
 7ec:	f3 2d       	mov	r31, r3
 7ee:	ff 76       	andi	r31, 0x6F	; 111
 7f0:	3f 2e       	mov	r3, r31
 7f2:	97 ff       	sbrs	r25, 7
 7f4:	09 c0       	rjmp	.+18     	; 0x808 <vfprintf+0x206>
 7f6:	90 95       	com	r25
 7f8:	80 95       	com	r24
 7fa:	70 95       	com	r23
 7fc:	61 95       	neg	r22
 7fe:	7f 4f       	sbci	r23, 0xFF	; 255
 800:	8f 4f       	sbci	r24, 0xFF	; 255
 802:	9f 4f       	sbci	r25, 0xFF	; 255
 804:	f0 68       	ori	r31, 0x80	; 128
 806:	3f 2e       	mov	r3, r31
 808:	2a e0       	ldi	r18, 0x0A	; 10
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	a3 01       	movw	r20, r6
 80e:	2d d1       	rcall	.+602    	; 0xa6a <__ultoa_invert>
 810:	88 2e       	mov	r8, r24
 812:	86 18       	sub	r8, r6
 814:	44 c0       	rjmp	.+136    	; 0x89e <vfprintf+0x29c>
 816:	85 37       	cpi	r24, 0x75	; 117
 818:	31 f4       	brne	.+12     	; 0x826 <vfprintf+0x224>
 81a:	23 2d       	mov	r18, r3
 81c:	2f 7e       	andi	r18, 0xEF	; 239
 81e:	b2 2e       	mov	r11, r18
 820:	2a e0       	ldi	r18, 0x0A	; 10
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	25 c0       	rjmp	.+74     	; 0x870 <vfprintf+0x26e>
 826:	93 2d       	mov	r25, r3
 828:	99 7f       	andi	r25, 0xF9	; 249
 82a:	b9 2e       	mov	r11, r25
 82c:	8f 36       	cpi	r24, 0x6F	; 111
 82e:	c1 f0       	breq	.+48     	; 0x860 <vfprintf+0x25e>
 830:	18 f4       	brcc	.+6      	; 0x838 <vfprintf+0x236>
 832:	88 35       	cpi	r24, 0x58	; 88
 834:	79 f0       	breq	.+30     	; 0x854 <vfprintf+0x252>
 836:	ae c0       	rjmp	.+348    	; 0x994 <__stack+0x95>
 838:	80 37       	cpi	r24, 0x70	; 112
 83a:	19 f0       	breq	.+6      	; 0x842 <vfprintf+0x240>
 83c:	88 37       	cpi	r24, 0x78	; 120
 83e:	21 f0       	breq	.+8      	; 0x848 <vfprintf+0x246>
 840:	a9 c0       	rjmp	.+338    	; 0x994 <__stack+0x95>
 842:	e9 2f       	mov	r30, r25
 844:	e0 61       	ori	r30, 0x10	; 16
 846:	be 2e       	mov	r11, r30
 848:	b4 fe       	sbrs	r11, 4
 84a:	0d c0       	rjmp	.+26     	; 0x866 <vfprintf+0x264>
 84c:	fb 2d       	mov	r31, r11
 84e:	f4 60       	ori	r31, 0x04	; 4
 850:	bf 2e       	mov	r11, r31
 852:	09 c0       	rjmp	.+18     	; 0x866 <vfprintf+0x264>
 854:	34 fe       	sbrs	r3, 4
 856:	0a c0       	rjmp	.+20     	; 0x86c <vfprintf+0x26a>
 858:	29 2f       	mov	r18, r25
 85a:	26 60       	ori	r18, 0x06	; 6
 85c:	b2 2e       	mov	r11, r18
 85e:	06 c0       	rjmp	.+12     	; 0x86c <vfprintf+0x26a>
 860:	28 e0       	ldi	r18, 0x08	; 8
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	05 c0       	rjmp	.+10     	; 0x870 <vfprintf+0x26e>
 866:	20 e1       	ldi	r18, 0x10	; 16
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	02 c0       	rjmp	.+4      	; 0x870 <vfprintf+0x26e>
 86c:	20 e1       	ldi	r18, 0x10	; 16
 86e:	32 e0       	ldi	r19, 0x02	; 2
 870:	f8 01       	movw	r30, r16
 872:	b7 fe       	sbrs	r11, 7
 874:	07 c0       	rjmp	.+14     	; 0x884 <vfprintf+0x282>
 876:	60 81       	ld	r22, Z
 878:	71 81       	ldd	r23, Z+1	; 0x01
 87a:	82 81       	ldd	r24, Z+2	; 0x02
 87c:	93 81       	ldd	r25, Z+3	; 0x03
 87e:	0c 5f       	subi	r16, 0xFC	; 252
 880:	1f 4f       	sbci	r17, 0xFF	; 255
 882:	06 c0       	rjmp	.+12     	; 0x890 <vfprintf+0x28e>
 884:	60 81       	ld	r22, Z
 886:	71 81       	ldd	r23, Z+1	; 0x01
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	0e 5f       	subi	r16, 0xFE	; 254
 88e:	1f 4f       	sbci	r17, 0xFF	; 255
 890:	a3 01       	movw	r20, r6
 892:	eb d0       	rcall	.+470    	; 0xa6a <__ultoa_invert>
 894:	88 2e       	mov	r8, r24
 896:	86 18       	sub	r8, r6
 898:	fb 2d       	mov	r31, r11
 89a:	ff 77       	andi	r31, 0x7F	; 127
 89c:	3f 2e       	mov	r3, r31
 89e:	36 fe       	sbrs	r3, 6
 8a0:	0d c0       	rjmp	.+26     	; 0x8bc <vfprintf+0x2ba>
 8a2:	23 2d       	mov	r18, r3
 8a4:	2e 7f       	andi	r18, 0xFE	; 254
 8a6:	a2 2e       	mov	r10, r18
 8a8:	89 14       	cp	r8, r9
 8aa:	58 f4       	brcc	.+22     	; 0x8c2 <vfprintf+0x2c0>
 8ac:	34 fe       	sbrs	r3, 4
 8ae:	0b c0       	rjmp	.+22     	; 0x8c6 <vfprintf+0x2c4>
 8b0:	32 fc       	sbrc	r3, 2
 8b2:	09 c0       	rjmp	.+18     	; 0x8c6 <vfprintf+0x2c4>
 8b4:	83 2d       	mov	r24, r3
 8b6:	8e 7e       	andi	r24, 0xEE	; 238
 8b8:	a8 2e       	mov	r10, r24
 8ba:	05 c0       	rjmp	.+10     	; 0x8c6 <vfprintf+0x2c4>
 8bc:	b8 2c       	mov	r11, r8
 8be:	a3 2c       	mov	r10, r3
 8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <vfprintf+0x2c6>
 8c2:	b8 2c       	mov	r11, r8
 8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <vfprintf+0x2c6>
 8c6:	b9 2c       	mov	r11, r9
 8c8:	a4 fe       	sbrs	r10, 4
 8ca:	0f c0       	rjmp	.+30     	; 0x8ea <vfprintf+0x2e8>
 8cc:	fe 01       	movw	r30, r28
 8ce:	e8 0d       	add	r30, r8
 8d0:	f1 1d       	adc	r31, r1
 8d2:	80 81       	ld	r24, Z
 8d4:	80 33       	cpi	r24, 0x30	; 48
 8d6:	21 f4       	brne	.+8      	; 0x8e0 <vfprintf+0x2de>
 8d8:	9a 2d       	mov	r25, r10
 8da:	99 7e       	andi	r25, 0xE9	; 233
 8dc:	a9 2e       	mov	r10, r25
 8de:	09 c0       	rjmp	.+18     	; 0x8f2 <vfprintf+0x2f0>
 8e0:	a2 fe       	sbrs	r10, 2
 8e2:	06 c0       	rjmp	.+12     	; 0x8f0 <vfprintf+0x2ee>
 8e4:	b3 94       	inc	r11
 8e6:	b3 94       	inc	r11
 8e8:	04 c0       	rjmp	.+8      	; 0x8f2 <vfprintf+0x2f0>
 8ea:	8a 2d       	mov	r24, r10
 8ec:	86 78       	andi	r24, 0x86	; 134
 8ee:	09 f0       	breq	.+2      	; 0x8f2 <vfprintf+0x2f0>
 8f0:	b3 94       	inc	r11
 8f2:	a3 fc       	sbrc	r10, 3
 8f4:	10 c0       	rjmp	.+32     	; 0x916 <__stack+0x17>
 8f6:	a0 fe       	sbrs	r10, 0
 8f8:	06 c0       	rjmp	.+12     	; 0x906 <__stack+0x7>
 8fa:	b2 14       	cp	r11, r2
 8fc:	80 f4       	brcc	.+32     	; 0x91e <__stack+0x1f>
 8fe:	28 0c       	add	r2, r8
 900:	92 2c       	mov	r9, r2
 902:	9b 18       	sub	r9, r11
 904:	0d c0       	rjmp	.+26     	; 0x920 <__stack+0x21>
 906:	b2 14       	cp	r11, r2
 908:	58 f4       	brcc	.+22     	; 0x920 <__stack+0x21>
 90a:	b6 01       	movw	r22, r12
 90c:	80 e2       	ldi	r24, 0x20	; 32
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	70 d0       	rcall	.+224    	; 0x9f2 <fputc>
 912:	b3 94       	inc	r11
 914:	f8 cf       	rjmp	.-16     	; 0x906 <__stack+0x7>
 916:	b2 14       	cp	r11, r2
 918:	18 f4       	brcc	.+6      	; 0x920 <__stack+0x21>
 91a:	2b 18       	sub	r2, r11
 91c:	02 c0       	rjmp	.+4      	; 0x922 <__stack+0x23>
 91e:	98 2c       	mov	r9, r8
 920:	21 2c       	mov	r2, r1
 922:	a4 fe       	sbrs	r10, 4
 924:	0f c0       	rjmp	.+30     	; 0x944 <__stack+0x45>
 926:	b6 01       	movw	r22, r12
 928:	80 e3       	ldi	r24, 0x30	; 48
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	62 d0       	rcall	.+196    	; 0x9f2 <fputc>
 92e:	a2 fe       	sbrs	r10, 2
 930:	16 c0       	rjmp	.+44     	; 0x95e <__stack+0x5f>
 932:	a1 fc       	sbrc	r10, 1
 934:	03 c0       	rjmp	.+6      	; 0x93c <__stack+0x3d>
 936:	88 e7       	ldi	r24, 0x78	; 120
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	02 c0       	rjmp	.+4      	; 0x940 <__stack+0x41>
 93c:	88 e5       	ldi	r24, 0x58	; 88
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	b6 01       	movw	r22, r12
 942:	0c c0       	rjmp	.+24     	; 0x95c <__stack+0x5d>
 944:	8a 2d       	mov	r24, r10
 946:	86 78       	andi	r24, 0x86	; 134
 948:	51 f0       	breq	.+20     	; 0x95e <__stack+0x5f>
 94a:	a1 fe       	sbrs	r10, 1
 94c:	02 c0       	rjmp	.+4      	; 0x952 <__stack+0x53>
 94e:	8b e2       	ldi	r24, 0x2B	; 43
 950:	01 c0       	rjmp	.+2      	; 0x954 <__stack+0x55>
 952:	80 e2       	ldi	r24, 0x20	; 32
 954:	a7 fc       	sbrc	r10, 7
 956:	8d e2       	ldi	r24, 0x2D	; 45
 958:	b6 01       	movw	r22, r12
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	4a d0       	rcall	.+148    	; 0x9f2 <fputc>
 95e:	89 14       	cp	r8, r9
 960:	30 f4       	brcc	.+12     	; 0x96e <__stack+0x6f>
 962:	b6 01       	movw	r22, r12
 964:	80 e3       	ldi	r24, 0x30	; 48
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	44 d0       	rcall	.+136    	; 0x9f2 <fputc>
 96a:	9a 94       	dec	r9
 96c:	f8 cf       	rjmp	.-16     	; 0x95e <__stack+0x5f>
 96e:	8a 94       	dec	r8
 970:	f3 01       	movw	r30, r6
 972:	e8 0d       	add	r30, r8
 974:	f1 1d       	adc	r31, r1
 976:	80 81       	ld	r24, Z
 978:	b6 01       	movw	r22, r12
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	3a d0       	rcall	.+116    	; 0x9f2 <fputc>
 97e:	81 10       	cpse	r8, r1
 980:	f6 cf       	rjmp	.-20     	; 0x96e <__stack+0x6f>
 982:	22 20       	and	r2, r2
 984:	09 f4       	brne	.+2      	; 0x988 <__stack+0x89>
 986:	4e ce       	rjmp	.-868    	; 0x624 <vfprintf+0x22>
 988:	b6 01       	movw	r22, r12
 98a:	80 e2       	ldi	r24, 0x20	; 32
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	31 d0       	rcall	.+98     	; 0x9f2 <fputc>
 990:	2a 94       	dec	r2
 992:	f7 cf       	rjmp	.-18     	; 0x982 <__stack+0x83>
 994:	f6 01       	movw	r30, r12
 996:	86 81       	ldd	r24, Z+6	; 0x06
 998:	97 81       	ldd	r25, Z+7	; 0x07
 99a:	02 c0       	rjmp	.+4      	; 0x9a0 <__stack+0xa1>
 99c:	8f ef       	ldi	r24, 0xFF	; 255
 99e:	9f ef       	ldi	r25, 0xFF	; 255
 9a0:	2b 96       	adiw	r28, 0x0b	; 11
 9a2:	e2 e1       	ldi	r30, 0x12	; 18
 9a4:	dc c0       	rjmp	.+440    	; 0xb5e <__epilogue_restores__>

000009a6 <strnlen_P>:
 9a6:	fc 01       	movw	r30, r24
 9a8:	05 90       	lpm	r0, Z+
 9aa:	61 50       	subi	r22, 0x01	; 1
 9ac:	70 40       	sbci	r23, 0x00	; 0
 9ae:	01 10       	cpse	r0, r1
 9b0:	d8 f7       	brcc	.-10     	; 0x9a8 <strnlen_P+0x2>
 9b2:	80 95       	com	r24
 9b4:	90 95       	com	r25
 9b6:	8e 0f       	add	r24, r30
 9b8:	9f 1f       	adc	r25, r31
 9ba:	08 95       	ret

000009bc <strnlen>:
 9bc:	fc 01       	movw	r30, r24
 9be:	61 50       	subi	r22, 0x01	; 1
 9c0:	70 40       	sbci	r23, 0x00	; 0
 9c2:	01 90       	ld	r0, Z+
 9c4:	01 10       	cpse	r0, r1
 9c6:	d8 f7       	brcc	.-10     	; 0x9be <strnlen+0x2>
 9c8:	80 95       	com	r24
 9ca:	90 95       	com	r25
 9cc:	8e 0f       	add	r24, r30
 9ce:	9f 1f       	adc	r25, r31
 9d0:	08 95       	ret

000009d2 <strrev>:
 9d2:	dc 01       	movw	r26, r24
 9d4:	fc 01       	movw	r30, r24
 9d6:	67 2f       	mov	r22, r23
 9d8:	71 91       	ld	r23, Z+
 9da:	77 23       	and	r23, r23
 9dc:	e1 f7       	brne	.-8      	; 0x9d6 <strrev+0x4>
 9de:	32 97       	sbiw	r30, 0x02	; 2
 9e0:	04 c0       	rjmp	.+8      	; 0x9ea <strrev+0x18>
 9e2:	7c 91       	ld	r23, X
 9e4:	6d 93       	st	X+, r22
 9e6:	70 83       	st	Z, r23
 9e8:	62 91       	ld	r22, -Z
 9ea:	ae 17       	cp	r26, r30
 9ec:	bf 07       	cpc	r27, r31
 9ee:	c8 f3       	brcs	.-14     	; 0x9e2 <strrev+0x10>
 9f0:	08 95       	ret

000009f2 <fputc>:
 9f2:	0f 93       	push	r16
 9f4:	1f 93       	push	r17
 9f6:	cf 93       	push	r28
 9f8:	df 93       	push	r29
 9fa:	fb 01       	movw	r30, r22
 9fc:	23 81       	ldd	r18, Z+3	; 0x03
 9fe:	21 fd       	sbrc	r18, 1
 a00:	03 c0       	rjmp	.+6      	; 0xa08 <fputc+0x16>
 a02:	8f ef       	ldi	r24, 0xFF	; 255
 a04:	9f ef       	ldi	r25, 0xFF	; 255
 a06:	2c c0       	rjmp	.+88     	; 0xa60 <fputc+0x6e>
 a08:	22 ff       	sbrs	r18, 2
 a0a:	16 c0       	rjmp	.+44     	; 0xa38 <fputc+0x46>
 a0c:	46 81       	ldd	r20, Z+6	; 0x06
 a0e:	57 81       	ldd	r21, Z+7	; 0x07
 a10:	24 81       	ldd	r18, Z+4	; 0x04
 a12:	35 81       	ldd	r19, Z+5	; 0x05
 a14:	42 17       	cp	r20, r18
 a16:	53 07       	cpc	r21, r19
 a18:	44 f4       	brge	.+16     	; 0xa2a <fputc+0x38>
 a1a:	a0 81       	ld	r26, Z
 a1c:	b1 81       	ldd	r27, Z+1	; 0x01
 a1e:	9d 01       	movw	r18, r26
 a20:	2f 5f       	subi	r18, 0xFF	; 255
 a22:	3f 4f       	sbci	r19, 0xFF	; 255
 a24:	31 83       	std	Z+1, r19	; 0x01
 a26:	20 83       	st	Z, r18
 a28:	8c 93       	st	X, r24
 a2a:	26 81       	ldd	r18, Z+6	; 0x06
 a2c:	37 81       	ldd	r19, Z+7	; 0x07
 a2e:	2f 5f       	subi	r18, 0xFF	; 255
 a30:	3f 4f       	sbci	r19, 0xFF	; 255
 a32:	37 83       	std	Z+7, r19	; 0x07
 a34:	26 83       	std	Z+6, r18	; 0x06
 a36:	14 c0       	rjmp	.+40     	; 0xa60 <fputc+0x6e>
 a38:	8b 01       	movw	r16, r22
 a3a:	ec 01       	movw	r28, r24
 a3c:	fb 01       	movw	r30, r22
 a3e:	00 84       	ldd	r0, Z+8	; 0x08
 a40:	f1 85       	ldd	r31, Z+9	; 0x09
 a42:	e0 2d       	mov	r30, r0
 a44:	09 95       	icall
 a46:	89 2b       	or	r24, r25
 a48:	e1 f6       	brne	.-72     	; 0xa02 <fputc+0x10>
 a4a:	d8 01       	movw	r26, r16
 a4c:	16 96       	adiw	r26, 0x06	; 6
 a4e:	8d 91       	ld	r24, X+
 a50:	9c 91       	ld	r25, X
 a52:	17 97       	sbiw	r26, 0x07	; 7
 a54:	01 96       	adiw	r24, 0x01	; 1
 a56:	17 96       	adiw	r26, 0x07	; 7
 a58:	9c 93       	st	X, r25
 a5a:	8e 93       	st	-X, r24
 a5c:	16 97       	sbiw	r26, 0x06	; 6
 a5e:	ce 01       	movw	r24, r28
 a60:	df 91       	pop	r29
 a62:	cf 91       	pop	r28
 a64:	1f 91       	pop	r17
 a66:	0f 91       	pop	r16
 a68:	08 95       	ret

00000a6a <__ultoa_invert>:
 a6a:	fa 01       	movw	r30, r20
 a6c:	aa 27       	eor	r26, r26
 a6e:	28 30       	cpi	r18, 0x08	; 8
 a70:	51 f1       	breq	.+84     	; 0xac6 <__ultoa_invert+0x5c>
 a72:	20 31       	cpi	r18, 0x10	; 16
 a74:	81 f1       	breq	.+96     	; 0xad6 <__ultoa_invert+0x6c>
 a76:	e8 94       	clt
 a78:	6f 93       	push	r22
 a7a:	6e 7f       	andi	r22, 0xFE	; 254
 a7c:	6e 5f       	subi	r22, 0xFE	; 254
 a7e:	7f 4f       	sbci	r23, 0xFF	; 255
 a80:	8f 4f       	sbci	r24, 0xFF	; 255
 a82:	9f 4f       	sbci	r25, 0xFF	; 255
 a84:	af 4f       	sbci	r26, 0xFF	; 255
 a86:	b1 e0       	ldi	r27, 0x01	; 1
 a88:	3e d0       	rcall	.+124    	; 0xb06 <__ultoa_invert+0x9c>
 a8a:	b4 e0       	ldi	r27, 0x04	; 4
 a8c:	3c d0       	rcall	.+120    	; 0xb06 <__ultoa_invert+0x9c>
 a8e:	67 0f       	add	r22, r23
 a90:	78 1f       	adc	r23, r24
 a92:	89 1f       	adc	r24, r25
 a94:	9a 1f       	adc	r25, r26
 a96:	a1 1d       	adc	r26, r1
 a98:	68 0f       	add	r22, r24
 a9a:	79 1f       	adc	r23, r25
 a9c:	8a 1f       	adc	r24, r26
 a9e:	91 1d       	adc	r25, r1
 aa0:	a1 1d       	adc	r26, r1
 aa2:	6a 0f       	add	r22, r26
 aa4:	71 1d       	adc	r23, r1
 aa6:	81 1d       	adc	r24, r1
 aa8:	91 1d       	adc	r25, r1
 aaa:	a1 1d       	adc	r26, r1
 aac:	20 d0       	rcall	.+64     	; 0xaee <__ultoa_invert+0x84>
 aae:	09 f4       	brne	.+2      	; 0xab2 <__ultoa_invert+0x48>
 ab0:	68 94       	set
 ab2:	3f 91       	pop	r19
 ab4:	2a e0       	ldi	r18, 0x0A	; 10
 ab6:	26 9f       	mul	r18, r22
 ab8:	11 24       	eor	r1, r1
 aba:	30 19       	sub	r19, r0
 abc:	30 5d       	subi	r19, 0xD0	; 208
 abe:	31 93       	st	Z+, r19
 ac0:	de f6       	brtc	.-74     	; 0xa78 <__ultoa_invert+0xe>
 ac2:	cf 01       	movw	r24, r30
 ac4:	08 95       	ret
 ac6:	46 2f       	mov	r20, r22
 ac8:	47 70       	andi	r20, 0x07	; 7
 aca:	40 5d       	subi	r20, 0xD0	; 208
 acc:	41 93       	st	Z+, r20
 ace:	b3 e0       	ldi	r27, 0x03	; 3
 ad0:	0f d0       	rcall	.+30     	; 0xaf0 <__ultoa_invert+0x86>
 ad2:	c9 f7       	brne	.-14     	; 0xac6 <__ultoa_invert+0x5c>
 ad4:	f6 cf       	rjmp	.-20     	; 0xac2 <__ultoa_invert+0x58>
 ad6:	46 2f       	mov	r20, r22
 ad8:	4f 70       	andi	r20, 0x0F	; 15
 ada:	40 5d       	subi	r20, 0xD0	; 208
 adc:	4a 33       	cpi	r20, 0x3A	; 58
 ade:	18 f0       	brcs	.+6      	; 0xae6 <__ultoa_invert+0x7c>
 ae0:	49 5d       	subi	r20, 0xD9	; 217
 ae2:	31 fd       	sbrc	r19, 1
 ae4:	40 52       	subi	r20, 0x20	; 32
 ae6:	41 93       	st	Z+, r20
 ae8:	02 d0       	rcall	.+4      	; 0xaee <__ultoa_invert+0x84>
 aea:	a9 f7       	brne	.-22     	; 0xad6 <__ultoa_invert+0x6c>
 aec:	ea cf       	rjmp	.-44     	; 0xac2 <__ultoa_invert+0x58>
 aee:	b4 e0       	ldi	r27, 0x04	; 4
 af0:	a6 95       	lsr	r26
 af2:	97 95       	ror	r25
 af4:	87 95       	ror	r24
 af6:	77 95       	ror	r23
 af8:	67 95       	ror	r22
 afa:	ba 95       	dec	r27
 afc:	c9 f7       	brne	.-14     	; 0xaf0 <__ultoa_invert+0x86>
 afe:	00 97       	sbiw	r24, 0x00	; 0
 b00:	61 05       	cpc	r22, r1
 b02:	71 05       	cpc	r23, r1
 b04:	08 95       	ret
 b06:	9b 01       	movw	r18, r22
 b08:	ac 01       	movw	r20, r24
 b0a:	0a 2e       	mov	r0, r26
 b0c:	06 94       	lsr	r0
 b0e:	57 95       	ror	r21
 b10:	47 95       	ror	r20
 b12:	37 95       	ror	r19
 b14:	27 95       	ror	r18
 b16:	ba 95       	dec	r27
 b18:	c9 f7       	brne	.-14     	; 0xb0c <__ultoa_invert+0xa2>
 b1a:	62 0f       	add	r22, r18
 b1c:	73 1f       	adc	r23, r19
 b1e:	84 1f       	adc	r24, r20
 b20:	95 1f       	adc	r25, r21
 b22:	a0 1d       	adc	r26, r0
 b24:	08 95       	ret

00000b26 <__prologue_saves__>:
 b26:	2f 92       	push	r2
 b28:	3f 92       	push	r3
 b2a:	4f 92       	push	r4
 b2c:	5f 92       	push	r5
 b2e:	6f 92       	push	r6
 b30:	7f 92       	push	r7
 b32:	8f 92       	push	r8
 b34:	9f 92       	push	r9
 b36:	af 92       	push	r10
 b38:	bf 92       	push	r11
 b3a:	cf 92       	push	r12
 b3c:	df 92       	push	r13
 b3e:	ef 92       	push	r14
 b40:	ff 92       	push	r15
 b42:	0f 93       	push	r16
 b44:	1f 93       	push	r17
 b46:	cf 93       	push	r28
 b48:	df 93       	push	r29
 b4a:	cd b7       	in	r28, 0x3d	; 61
 b4c:	de b7       	in	r29, 0x3e	; 62
 b4e:	ca 1b       	sub	r28, r26
 b50:	db 0b       	sbc	r29, r27
 b52:	0f b6       	in	r0, 0x3f	; 63
 b54:	f8 94       	cli
 b56:	de bf       	out	0x3e, r29	; 62
 b58:	0f be       	out	0x3f, r0	; 63
 b5a:	cd bf       	out	0x3d, r28	; 61
 b5c:	09 94       	ijmp

00000b5e <__epilogue_restores__>:
 b5e:	2a 88       	ldd	r2, Y+18	; 0x12
 b60:	39 88       	ldd	r3, Y+17	; 0x11
 b62:	48 88       	ldd	r4, Y+16	; 0x10
 b64:	5f 84       	ldd	r5, Y+15	; 0x0f
 b66:	6e 84       	ldd	r6, Y+14	; 0x0e
 b68:	7d 84       	ldd	r7, Y+13	; 0x0d
 b6a:	8c 84       	ldd	r8, Y+12	; 0x0c
 b6c:	9b 84       	ldd	r9, Y+11	; 0x0b
 b6e:	aa 84       	ldd	r10, Y+10	; 0x0a
 b70:	b9 84       	ldd	r11, Y+9	; 0x09
 b72:	c8 84       	ldd	r12, Y+8	; 0x08
 b74:	df 80       	ldd	r13, Y+7	; 0x07
 b76:	ee 80       	ldd	r14, Y+6	; 0x06
 b78:	fd 80       	ldd	r15, Y+5	; 0x05
 b7a:	0c 81       	ldd	r16, Y+4	; 0x04
 b7c:	1b 81       	ldd	r17, Y+3	; 0x03
 b7e:	aa 81       	ldd	r26, Y+2	; 0x02
 b80:	b9 81       	ldd	r27, Y+1	; 0x01
 b82:	ce 0f       	add	r28, r30
 b84:	d1 1d       	adc	r29, r1
 b86:	0f b6       	in	r0, 0x3f	; 63
 b88:	f8 94       	cli
 b8a:	de bf       	out	0x3e, r29	; 62
 b8c:	0f be       	out	0x3f, r0	; 63
 b8e:	cd bf       	out	0x3d, r28	; 61
 b90:	ed 01       	movw	r28, r26
 b92:	08 95       	ret

00000b94 <_exit>:
 b94:	f8 94       	cli

00000b96 <__stop_program>:
 b96:	ff cf       	rjmp	.-2      	; 0xb96 <__stop_program>
