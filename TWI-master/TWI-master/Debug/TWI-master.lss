
TWI-master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000959  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000745  00000000  00000000  00000b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e5  00000000  00000000  000012a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006d13  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d2  00000000  00000000  0000899f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00008b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000002e9  00000000  00000000  00008be1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	17 d0       	rcall	.+46     	; 0xa4 <main>
  76:	1a c0       	rjmp	.+52     	; 0xac <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <i2c_init>:
	unsigned char lcddata = 0x00;
	i2c_start_wait(I2C_DEVICE+I2C_READ);
	lcddata = i2c_readNak();
	i2c_stop();
	return lcddata;
}
  7a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  7e:	88 e4       	ldi	r24, 0x48	; 72
  80:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  84:	08 95       	ret

00000086 <i2c_readNak>:
  86:	84 e8       	ldi	r24, 0x84	; 132
  88:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  8c:	ec eb       	ldi	r30, 0xBC	; 188
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	88 23       	and	r24, r24
  94:	ec f7       	brge	.-6      	; 0x90 <i2c_readNak+0xa>
  96:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  9a:	08 95       	ret

0000009c <i2c_set_address>:

}/* i2c_readNak */

void i2c_set_address(void)
{
	TWAR = I2C_DEVICE;
  9c:	87 e2       	ldi	r24, 0x27	; 39
  9e:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
  a2:	08 95       	ret

000000a4 <main>:

/*-------------- Main function ----------------*/
int main(void)
{
	uint8_t data = 12;
	i2c_init();				// Initialize I2C
  a4:	ea df       	rcall	.-44     	; 0x7a <i2c_init>
	i2c_set_address();
  a6:	fa df       	rcall	.-12     	; 0x9c <i2c_set_address>
			
	while (1)
	{
		i2c_readNak();
  a8:	ee df       	rcall	.-36     	; 0x86 <i2c_readNak>
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x4>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
