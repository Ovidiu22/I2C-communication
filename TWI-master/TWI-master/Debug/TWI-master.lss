
TWI-master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092f  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075a  00000000  00000000  00000ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c8  00000000  00000000  00001301  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006d0b  00000000  00000000  00001cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d2  00000000  00000000  000089cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00008b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000002e9  00000000  00000000  00008c05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	54 d0       	rcall	.+168    	; 0x11e <main>
  76:	57 c0       	rjmp	.+174    	; 0x126 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
  7a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  7e:	88 e4       	ldi	r24, 0x48	; 72
  80:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  84:	08 95       	ret

00000086 <i2c_start_wait>:
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	ec eb       	ldi	r30, 0xBC	; 188
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	24 ea       	ldi	r18, 0xA4	; 164
  90:	a9 eb       	ldi	r26, 0xB9	; 185
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	cb eb       	ldi	r28, 0xBB	; 187
  96:	d0 e0       	ldi	r29, 0x00	; 0
  98:	34 e8       	ldi	r19, 0x84	; 132
  9a:	44 e9       	ldi	r20, 0x94	; 148
  9c:	20 83       	st	Z, r18
  9e:	90 81       	ld	r25, Z
  a0:	99 23       	and	r25, r25
  a2:	ec f7       	brge	.-6      	; 0x9e <i2c_start_wait+0x18>
  a4:	9c 91       	ld	r25, X
  a6:	98 7f       	andi	r25, 0xF8	; 248
  a8:	98 30       	cpi	r25, 0x08	; 8
  aa:	11 f0       	breq	.+4      	; 0xb0 <i2c_start_wait+0x2a>
  ac:	90 31       	cpi	r25, 0x10	; 16
  ae:	b1 f7       	brne	.-20     	; 0x9c <i2c_start_wait+0x16>
  b0:	88 83       	st	Y, r24
  b2:	30 83       	st	Z, r19
  b4:	90 81       	ld	r25, Z
  b6:	99 23       	and	r25, r25
  b8:	ec f7       	brge	.-6      	; 0xb4 <i2c_start_wait+0x2e>
  ba:	9c 91       	ld	r25, X
  bc:	98 7f       	andi	r25, 0xF8	; 248
  be:	90 32       	cpi	r25, 0x20	; 32
  c0:	11 f0       	breq	.+4      	; 0xc6 <i2c_start_wait+0x40>
  c2:	98 35       	cpi	r25, 0x58	; 88
  c4:	29 f4       	brne	.+10     	; 0xd0 <i2c_start_wait+0x4a>
  c6:	40 83       	st	Z, r20
  c8:	90 81       	ld	r25, Z
  ca:	94 fd       	sbrc	r25, 4
  cc:	fd cf       	rjmp	.-6      	; 0xc8 <i2c_start_wait+0x42>
  ce:	e6 cf       	rjmp	.-52     	; 0x9c <i2c_start_wait+0x16>
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	08 95       	ret

000000d6 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
  d6:	84 e9       	ldi	r24, 0x94	; 148
  d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
  dc:	ec eb       	ldi	r30, 0xBC	; 188
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	84 fd       	sbrc	r24, 4
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <i2c_stop+0xa>

}/* i2c_stop */
  e6:	08 95       	ret

000000e8 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
  e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
  ec:	84 e8       	ldi	r24, 0x84	; 132
  ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
  f2:	ec eb       	ldi	r30, 0xBC	; 188
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	ec f7       	brge	.-6      	; 0xf6 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
  fc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 100:	98 7f       	andi	r25, 0xF8	; 248
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	98 32       	cpi	r25, 0x28	; 40
 106:	09 f4       	brne	.+2      	; 0x10a <i2c_write+0x22>
 108:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 10a:	08 95       	ret

0000010c <write_i2c>:
#include <compat/twi.h>
#include "I2C.h"


void write_i2c(unsigned char value)
{
 10c:	cf 93       	push	r28
 10e:	c8 2f       	mov	r28, r24
												
	i2c_start_wait(I2C_DEVICE+I2C_WRITE);		
 110:	87 e2       	ldi	r24, 0x27	; 39
 112:	b9 df       	rcall	.-142    	; 0x86 <i2c_start_wait>
	
	i2c_write(value);							
 114:	8c 2f       	mov	r24, r28
	
	i2c_stop();	
 116:	e8 df       	rcall	.-48     	; 0xe8 <i2c_write>
 118:	de df       	rcall	.-68     	; 0xd6 <i2c_stop>
	
}
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <main>:

/*-------------- Main function ----------------*/
int main(void)
{
	uint8_t data = 12;
	i2c_init();				// Initialize I2C
 11e:	ad df       	rcall	.-166    	; 0x7a <i2c_init>
			
	while (1)
	{
		write_i2c(data);		// Send data over i2c
 120:	8c e0       	ldi	r24, 0x0C	; 12
 122:	f4 df       	rcall	.-24     	; 0x10c <write_i2c>
 124:	fd cf       	rjmp	.-6      	; 0x120 <main+0x2>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
